/*
```javascript
/**/

// Why do these docs look wierd? They are also the tests.

'use strict';

var test = require('tape')
var level = require('level')
var llibrarian = require('../index.js')
var pull = require('pull-stream')
var pl = require('pull-level')
var dump = require('level-dump')
var rimraf = require('rimraf')

rimraf.sync('./test.db')
var db = level('./test.db')


/*
```
## .write(db, indexes[, opts, done])
Returns a pull-stream sink that writes a stream of documents to the db, adding
index documents as well.
- `db`: A leveldb.
- `indexes`: An array of index keypaths.

#### Indexes array
level-librarian consumes index definitions as an object or array of keypaths,
or keypath arrays. Keypaths are resolved by safe-access, using the `value`
property of the document as a base. To create multi-level indexes, use an
array.
```javascript
/**/
var example_document = {
  key: 'w32fwfw33',
  value: {
    timestamp: '29304857',
    content: { name: 'richard', score: 4 }
  }
}

var indexes = [
  // The values at these keypaths are concatenated to create the keys of
  // index documents. By default, level-librarian will add the key of the main
  // document to the end of the index key to ensure uniqueness.
  'content.score',
  // Key generated: '~content.score~4~w32fwfw33'

  // You can pass an options object in the array. Right now, the only option
  // is `latest` will only index the latest document with a given value at the keypath.
  ['content.score', '$latest'],
  // Key generated: '~content.score~4~'
  // (Any subsequent documents with a content.score of 4 will overwrite this)

  // You can create secondary indexes by supplying an array
  ['content.score', 'timestamp']
  // Key generated: '~content.score,timestamp~4~29304857~w32fwfw33'
]

var documents = [{
  key: 'w32fwfw33',
  value: {
    timestamp: '29304857',
    content: { name: 'richard', score: 4 }
  }
}, {
  key: '39djdjj31',
  value: {
    timestamp: '29304932',
    content: { name: 'mary', score: 5 }
  }
}, {
  key: 'dlnqoq003',
  value: {
    timestamp: '29304990',
    content: { name: 'jeff', score: 4 }
  }
}]

test('.write(db, indexes)', function (t) {
  pull(
    pull.values(documents),
    llibrarian.write(db, indexes, null, function () {
      console.log('yea' + JSON.stringify(arguments))
      setTimeout(function () {
        console.log('\n\n\n\n\n\n\n\n')
        dump(db)
      }, 2000)
      t.end()
    })
  )
})
/*
```
## .read (db, query[, options])
Returns a pull-stream source of documents matching the query.
- `db`: A leveldb.
- `query`: A query in the `{ k: ..., v: ... }` format.
- `options`: same as the options passed into pull-level, except for the fact
that `gt`, `lt`, `gte`, `lte` will not work, as they are generated by
level-librarian.

#### Query format
level-librarian expects queries as objects with `k` and `v` properties.
- `k` is one of the index definitions that you supplied when writing.
- `v` is an array of value(s) to search for. If you supply an array with 2
values, level-librarian will find the documents in that range. If you leave an
index off, level-librarian will find documents with any value at that
position.
```javascript
/**/
test('.read (db, query[, options])', function (t) {

  // This should retrieve all documents with a score of 4
  var pullish = llibrarian.read(db, {
      k: ['content.score'],
      v: '4'
    })
  pull(
    pullish,
    pull.collect(function (err, arr) {
      console.log('A', arr)
    })
  )

  // This should retrieve the latest documents with a score of 4 or 5
  pull(
    llibrarian.read(db, {
      k: ['content.score', '$latest'],
      v: [['4', '5']] // content.score value range
    }),
    pull.collect(function (err, arr) {
      console.log('B', arr)
    })
  )

  // This should retrieve all documents with a content.score of 4 with a
  // timestamp between '29304857' and '29304923'
  pull(
    llibrarian.read(db, {
      k: ['content.score', 'timestamp'],
      v: ['4', ['29304857', '29304923']] // timestamp value range
    }),
    pull.collect(function (err, arr) {
      console.log('C', arr)
    })
  )

  // This should retrieve all documents with a score of 4 (just like the first
  // example, since we left the timestamp off)
  pull(
    llibrarian.read(db, {
      k: ['content.score', 'timestamp'],
      v: '4', // Timestamp value left off
    }),
    pull.collect(function (arr) {
      console.log('D', arr)
    })
  )

})

/*
```
/**/